rm(list = ls())

library(dplyr)
library(readxl)
library(foreign)
library(ggplot2)
library(tidyverse)
library(hrbrthemes)
library(viridis)
library(lubridate)
library(reshape2)
library(gghighlight)
library(formattable)
library(DT)
library(circular)
library(ggpmisc)

#EQUIPO RBROS
#TEMA: BASE DE DATOS DEL NASDAQ 100 DE LOS ULTIMOS 4 AÑOS, CON INFORMACIÓN COMO MÁXIMOS, MÍNIMOS, PRECIOS DE APERTURA, CIERRE Y CAMBIO PORCENTUAL.
#By ÁNGEL GONZÁLEZ.

Path00 <- "C:/Users/Administrator/Desktop/AnDat/" #Custom Path
Path01 <- paste0(Path00,"INPUT/")
Path02 <- paste0(Path00,"OUTPUT/")

NQ_DAILY=read.csv(paste0(Path01, "NQ_DAILY2.csv"))
BD=data.frame(NQ_DAILY)

NQ_WEEKLY=read.csv(paste0(Path01, "NQ_WEEKLY.csv"))
NQ_W2=data.frame(NQ_WEEKLY)
NQ_W2$Date=as.Date(NQ_WEEKLY$Date, format = "%m/%d/%Y")

NQ_MONTHLY=read.csv(paste0(Path01, "NQ_MONTHLY.csv"))
NQ_M=data.frame(NQ_MONTHLY)
NQ_M$Date=as.Date(NQ_MONTHLY$Date, format = "%m/%d/%Y")

ES_DAILY=read.csv(paste0(Path01, "S&P500_DAILY.csv"))
ES_D=data.frame(ES_DAILY)
ES_D2=ES_D[order(ES_D$Date), ]

#1.- Porcentaje de los días que supera el máximo del día anterior.
BD$Date=as.Date(BD$Date, format = "%m/%d/%Y")

#Ordena cronológicamente.
BD2=BD[order(BD$Date), ]

#Genera columna 'high_prev' con el máximo del día anterior.
BD2$high_prev=dplyr::lag(BD2$High)

#Verifica si cada día supera el máximo del día anterior.
BD2$supero_max_anterior=BD2$High > BD2$high_prev

#Porcentaje de días que cumplieron la condición.
per=mean(BD2$supero_max_anterior, na.rm = TRUE) * 100
per

#Imprime el porcentaje.
cat("El porcentaje de días en que el NQ superó el máximo del día anterior fue de:", per, "%\n")

#Gráfico 1.
data_pastel1 <- data.frame(
  cat=c("Superó máximo", "No superó máximo"),
  per=c(per, 100-per)
)

ggplot(data_pastel1, aes(x = "", y = per, fill = cat)) +
  geom_bar(width = 1, stat = "identity", color = "black") +
  coord_polar("y", start = 0) +
  geom_text(aes(label = paste0(round(per, 1), "%")), 
            position = position_stack(vjust = 0.5), size = 5, color = "black")+
  labs(title = "Porcentaje de días que superaron el máximo del día anterior",
       fill = "Categoría") +
  theme_void() +
  scale_fill_manual(values = c("red", "green"))





#2.- Porcentaje de los días que supera el mínimo del día anterior.
BD2$low_prev=dplyr::lag(BD2$Low)
BD2$supero_min_anterior= BD2$Low > BD2$low_prev
porcentaje_min=mean(BD2$supero_min_anterior, na.rm = TRUE) * 100
cat("El porcentaje de días en que el NQ superó el mínimo del día anterior fue de:", porcentaje_min, "%\n")

#Gráfico 2.
data_pastel2 <- data.frame(
  categoria = c("Superó mínimo", "No superó mínimo"),
  porcentaje = c(porcentaje_min, 100 - porcentaje_min)
)

ggplot(data_pastel2, aes(x = "", y = porcentaje, fill = categoria)) +
  geom_bar(width = 1, stat = "identity", color = "black") +
  coord_polar("y", start = 0) +
  geom_text(aes(label = paste0(round(porcentaje, 1), "%")), 
            position = position_stack(vjust = 0.5), size = 5, color = "black")+
  labs(title = "Porcentaje de días que superaron el mínimo del día anterior.",
       fill = "Categoría") +
  theme_void() +
  scale_fill_manual(values = c("red", "green"))






#3.- Porcentaje de los días que supera el mínimo y máximo del día anterior.
BD2$supero_minymax_anterior= BD2$Low > BD2$low_prev & BD2$High > BD2$high_prev
porcentaje_min_max=mean(BD2$supero_minymax_anterior, na.rm = TRUE) * 100
cat("El porcentaje de días en que el NQ superó el mínimo y máximo del día anterior fue de:", porcentaje_min_max, "%\n")

#Gráfico 3.
data_pastel3 <- data.frame(
  categoria = c("Superó mínimo y máximo", "No superó mínimo y máximo"),
  porcentaje = c(porcentaje_min_max, 100 - porcentaje_min_max)
)

ggplot(data_pastel3, aes(x = "", y = porcentaje, fill = categoria)) +
  geom_bar(width = 1, stat = "identity", color = "black") +
  coord_polar("y", start = 0) +
  geom_text(aes(label = paste0(round(porcentaje, 1), "%")), 
            position = position_stack(vjust = 0.5), size = 5, color = "black")+
  labs(title = "Porcentaje de días que superaron el mínimo y máximo del día anterior.",
       fill = "Categoría") +
  theme_void() +
  scale_fill_manual(values = c("red", "green"))




#4.- En una semana alcista, ¿Qué día suele ser el máximo de la semana?
NQ_W2=NQ_W2[order(NQ_W2$Date), ]
#Filtra solo las semanas alcistas
semanas_alcistas=NQ_W2 %>% filter(Change.. > 0)
BD2 <- BD2 %>%
  mutate(semana = ceiling_date(Date, unit = "week", week_start = 7))
NQ_W2 <- NQ_W2 %>%
  mutate(semana = ceiling_date(Date, unit = "week", week_start = 7))
#Filtra los días que están en semanas alcistas.
dias_en_semanas_alcistas=BD2 %>%
  filter(semana %in% semanas_alcistas$semana)
#Encuentra el día con el máximo de cada semana alcista.
dia_max_por_semana=dias_en_semanas_alcistas %>%
  group_by(semana) %>%
  filter(High == max(High, na.rm = TRUE))%>%
  slice(1)
#Obtener el día de la semana que suele tener el máximo.
dia_que_suele_ser_maximo=dia_max_por_semana %>%
  mutate(dia_semana = weekdays(Date)) %>%
  count(dia_semana) %>%
  arrange(desc(n))
dia_que_suele_ser_maximo %>% group_by(dia_semana) %>% count() %>% mutate(n=paste0(n, " veces"))

#Gráfico 4.
ggplot(dia_que_suele_ser_maximo, aes(x=dia_semana, y=n, fill=dia_semana)) +
  geom_bar(stat = "identity", width = 0.4, color= 'black') +
  labs(title = "Frecuencia de días de la semana con máximos en semanas alcistas.",
       x = "Día de la semana",
       y = "Frecuencia") +
  theme_minimal() +
  theme(legend.position="none", plot.title= element_text(hjust = 0.5, size = 16, face = "bold")) +
  scale_fill_brewer(palette="Set3")





#5- En una semana alcista, ¿Qué día suele ser el mínimo de la semana?
NQ_W2=NQ_W2[order(NQ_W2$Date), ]
#Filtra solo las semanas alcistas
semanas_alcistas=NQ_W2 %>% filter(Change.. > 0)
BD2 <- BD2 %>%
  mutate(semana = ceiling_date(Date, unit = "week", week_start = 7))
NQ_W2 <- NQ_W2 %>%
  mutate(semana = ceiling_date(Date, unit = "week", week_start = 7))

dias_en_semanas_alcistas=BD2 %>%
  filter(semana %in% semanas_alcistas$semana)

dia_min_por_semana=dias_en_semanas_alcistas %>%
  group_by(semana) %>%
  filter(Low == min(Low, na.rm = TRUE))%>%
  slice(1)

dia_que_suele_ser_minimo=dia_min_por_semana %>%
  mutate(dia_semana = weekdays(Date)) %>%
  count(dia_semana) %>%
  arrange(desc(n))
dia_que_suele_ser_minimo %>% group_by(dia_semana) %>% count() %>% mutate(n=paste0(n, " veces"))

#Gráfico 5.
ggplot(dia_que_suele_ser_minimo, aes(x=dia_semana, y=n, fill=dia_semana)) +
  geom_bar(stat = "identity", width = 0.4, color= 'black') +
  labs(title = "Frecuencia de días de la semana con mínomos en semanas alcistas.",
       x = "Día de la Semana",
       y = "Frecuencia") +
  theme_minimal() +
  theme(legend.position="none", plot.title= element_text(hjust = 0.5, size = 16, face = "bold")) +
  scale_fill_brewer(palette="Set3")





#6- En una semana bajista, ¿Qué día suele ser el mínimo de la semana?
NQ_W2=NQ_W2[order(NQ_W2$Date), ]
semanas_bajistas=NQ_W2 %>% filter(Change.. < 0)
BD2 <- BD2 %>%
  mutate(semana = ceiling_date(Date, unit = "week", week_start = 7))
NQ_W2 <- NQ_W2 %>%
  mutate(semana = ceiling_date(Date, unit = "week", week_start = 7))
dias_en_semanas_bajistas=BD2 %>%
  filter(semana %in% semanas_bajistas$semana)
dia_min_por_semana=dias_en_semanas_bajistas %>%
  group_by(semana) %>%
  filter(Low == min(Low, na.rm = TRUE))%>%
  slice(1)
dia_que_suele_ser_minimo=dia_min_por_semana %>%
  mutate(dia_semana = weekdays(Date)) %>%
  count(dia_semana) %>%
  arrange(desc(n))
dia_que_suele_ser_minimo %>% group_by(dia_semana) %>% count() %>% mutate(n=paste0(n, " veces"))

#Gráfico 6.
ggplot(dia_que_suele_ser_minimo, aes(x=dia_semana, y=n, fill=dia_semana)) +
  geom_bar(stat = "identity", width = 0.4, color= 'black') +
  labs(title = "Frecuencia de días de la semana con mínimos en semanas alcistas.",
       x = "Día de la semana",
       y = "Frecuencia") +
  theme_minimal() +
  theme(legend.position="none", plot.title= element_text(hjust = 0.5, size = 16, face = "bold")) +
  scale_fill_brewer(palette="Set3")





#7. Porcentaje de las semanas que supera el mínimo de la semana previa.
NQ_W2$low_prev=dplyr::lag(NQ_W2$Low)
NQ_W2$supero_min_anterior= NQ_W2$Low > NQ_W2$low_prev
per_minW=mean(NQ_W2$supero_min_anterior, na.rm = TRUE) * 100
cat("El porcentaje de semanas en que el NQ superó el minimo de la semana anterior fue de:", per_minW, "%\n")

#Gráfico 7.
data_pastel4 <- data.frame(
  categoria = c("Superó mínimo semanal", "No superó mínimo semanal"),
  porcentaje = c(per_minW, 100-per_minW)
)

ggplot(data_pastel4, aes(x = "", y = porcentaje, fill = categoria)) +
  geom_bar(width = 1, stat = "identity", color = "black") +
  coord_polar("y", start = 0) +
  geom_text(aes(label = paste0(round(porcentaje, 1), "%")), 
            position = position_stack(vjust = 0.5), size = 5, color = "black")+
  labs(title = "Porcentaje de semanas que superaron el mínimo de la semana anterior.",
       fill = "Categoría") +
  theme_void() +
  scale_fill_manual(values = c("red", "green"))





#8.- Porcentaje de las semanas que supera el máximo de la semana previa.
NQ_W2$high_prev <- dplyr::lag(NQ_W2$High)
NQ_W2$supero_max_anterior <- NQ_W2$High > NQ_W2$high_prev
per_maxW <- mean(NQ_W2$supero_max_anterior, na.rm =TRUE)*100

cat("El porcentaje de semanas en que el NQ superó el máximo de la semana anterior fue de:", per_maxW, "%\n")

#Gráfico 8.
data_dona <- data.frame(
  categoria = c("Superó máximo semanal", "No superó máximo semanal"),
  porcentaje = c(per_maxW, 100 - per_maxW)
)

data_dona$ymax <- cumsum(data_dona$porcentaje)
data_dona$ymin <- c(0, head(data_dona$ymax, n = -1))
data_dona$label <- paste0(round(data_dona$porcentaje, 1), "%")

ggplot(data_dona, aes(ymax = ymax, ymin = ymin, xmax = 4, xmin = 3, fill = categoria)) +
  geom_rect(color = "black") +
  coord_polar(theta = "y") +
  xlim(c(2, 4)) +
  geom_text(aes(x = 3.5, y = (ymin + ymax) / 2, label = label), color = "black", size = 5) +
  labs(
    title = "Porcentaje de semanas que superaron el máximo de la semana anterior.",
    fill = "Categoría"
  ) +
  theme_void() +
  scale_fill_manual(values = c("green", "red")) +
  theme(legend.position = "bottom")





#9. Porcentaje de las semanas que supera el maximo o minimo de la semana previa
NQ_W2$high_prev <- dplyr::lag(NQ_W2$High)
NQ_W2$low_prev <- dplyr::lag(NQ_W2$Low)

NQ_W2$supero_max_anterior <- NQ_W2$High > NQ_W2$high_prev
NQ_W2$supero_min_anterior <- NQ_W2$Low < NQ_W2$low_prev
NQ_W2$supero_max_o_min <- NQ_W2$supero_max_anterior | NQ_W2$supero_min_anterior

per_max_or_min <- mean(NQ_W2$supero_max_o_min, na.rm =TRUE)*100

cat("Porcentaje de semanas que superaron el máximo o mínimo de la semana previa:", per_max_or_min, "%\n")

#Gráfico 9.
data_dona <- data.frame(
  categoria = c("Superó máximo o mínimo", "No superó máximo ni mínimo"),
  porcentaje = c(per_max_or_min, 100 - per_max_or_min)
)

data_dona$ymax <- cumsum(data_dona$porcentaje)
data_dona$ymin <- c(0, head(data_dona$ymax, n = -1))
data_dona$label <- paste0(round(data_dona$porcentaje, 1), "%")

ggplot(data_dona, aes(ymax = ymax, ymin = ymin, xmax = 4, xmin = 3, fill = categoria)) +
  geom_rect(color = "black") +
  coord_polar(theta = "y") +
  xlim(c(2, 4)) +
  geom_text(aes(x = 3.5, y = (ymin + ymax) / 2, label = label), color = "black", size = 5) +
  labs(
    title = "Porcentaje de semanas que superaron el máximo o mínimo de la semana previa.",
    fill = "Categoría"
  ) +
  theme_void() +
  scale_fill_manual(values = c("red", "green")) +
  theme(legend.position = "bottom")





#10. Porcentaje de semanas alcistas seguida por una bajista (tendencias).
NQ_W2 <- NQ_W2 %>% mutate(alcista = Change.. > 0)
NQ_W2 <- NQ_W2 %>% mutate(alcista_siguiente = dplyr::lead(alcista))

#Semana bajista después de una alcista: 'alcista' == TRUE y 'alcista_siguiente' == FALSE.
semanas_alcista_seguidas_por_bajista <- NQ_W2 %>%
  filter(alcista == TRUE & alcista_siguiente == FALSE)

porcentaje_seguidas_por_bajista <- (nrow(semanas_alcista_seguidas_por_bajista) / sum(NQ_W2$alcista == TRUE)) * 100
cat("El porcentaje de semanas alcistas seguidas por una semana bajista es:", round(porcentaje_seguidas_por_bajista, 2), "%\n")

# Gráfico 10.
data_barras <- data.frame(
  categoria = c("Alcista seguida por bajista", "Otras semanas alcistas"),
  porcentaje = c(porcentaje_seguidas_por_bajista, 100 - porcentaje_seguidas_por_bajista)
)

ggplot(data_barras, aes(x = categoria, y = porcentaje, fill = categoria)) +
  geom_bar(stat = "identity", color = "black") +
  geom_text(aes(label = paste0(round(porcentaje, 1), "%")), vjust = -0.5, size = 5) +
  labs(title = "Porcentaje de semanas alcistas seguidas por una semana bajista.", x = "Categoría", y = "Porcentaje", fill = "Categoría"  ) +
  scale_fill_manual(values = c("purple", "gray")) +
  theme_minimal() +
  theme(legend.position = "none")





# 11.- Porcentaje de semanas bajistas seguida por una alcista (tendencias)
NQ_W2 <- NQ_W2 %>% mutate(bajista = Change.. < 0, bajista_siguiente = dplyr::lead(bajista))
semanas_bajista_seguidas_por_alcista <- NQ_W2 %>% filter(bajista == TRUE & bajista_siguiente == FALSE)

porcentaje_seguidas_por_alcista <- (nrow(semanas_bajista_seguidas_por_alcista) / sum(NQ_W2$bajista == TRUE)) * 100
cat("El porcentaje de semanas bajistas seguidas por una semana alcista es:", round(porcentaje_seguidas_por_alcista, 2), "%\n")

data_barras <- data.frame(
  categoria = c("Bajista seguida por Alcista", "Otras semanas bajistas"),
  porcentaje = c(porcentaje_seguidas_por_alcista, 100 - porcentaje_seguidas_por_alcista))

# Gráfico 11
ggplot(data_barras, aes(x = categoria, y = porcentaje, fill = categoria)) +
  geom_bar(stat = "identity", color = "black") +
  geom_text(aes(label = paste0(round(porcentaje, 1), "%")), vjust = -0.5, size = 5) +
  labs(title = "Porcentaje de semanas bajistas seguidas por una semana alcista.",x = "Categoría", y = "Porcentaje", fill = "Categoría") +
  scale_fill_manual(values = c("purple", "gray")) +
  theme_minimal() +
  theme(legend.position = "none")




#12.- Históricamente (Últimos 4 años), ¿Qué meses en promedio suelen ser positivos o negativos?
NQ_M$Change.. <- gsub("%", "", NQ_M$Change..)
NQ_M$Change.. <- trimws(NQ_M$Change..)
NQ_M$Change.. <- as.numeric(NQ_M$Change..)/100

NQ_M$Date <- as.Date(NQ_M$Date, format = "%m/%d/%Y")

cambio_mensual = NQ_M %>%
  mutate(month = format(Date, "%m")) %>%
  group_by(month) %>%
  summarise(average_change = mean(Change.., na.rm = TRUE)) %>%
  mutate(month = as.numeric(month)) %>%
  arrange(month)

cambio_mensual$average_change <- cambio_mensual$average_change * 100
print(cambio_mensual)

#Gráfico 12.
ggplot(cambio_mensual, aes(x=month, y=average_change, fill=average_change)) +
  geom_bar(stat = "identity") +
  scale_x_continuous(breaks=1:12, labels=c("Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic")) +
  scale_fill_gradient2(low ="#C30010", mid ="#ffe81f", high="#005200", midpoint=0) +  
  labs(
    title = "Cambio Mensual Promedio (% Últimos 3 años).",
    x="Mes",
    y ="Cambio Promedio (%)"
  ) +
  theme_minimal() +
  theme(legend.position = "none")





#13.- Correlación entre los precios históricos del SP500 y NQ.
#Primero cambiar el formato de las fechas para hacer que coincidan.
ES_D2 <- ES_D2 %>%
  mutate(Date = as.Date(Date, format = "%d/%m/%Y"))
BD2 <- BD2 %>%
  mutate(Date = as.Date(Date, format = "%Y-%m-%d"))

#Unir las databases según su columna Price.
datos_combinados <- ES_D2 %>%
  inner_join(BD2, by = "Date")

#Seleccionar las columnas 'Price' y remover NAs.
datos_numericos <- datos_combinados %>%
  select(Date, Price_ES = Price.x, Price_BD = Price.y) %>%
  filter(!is.na(Price_ES) & !is.na(Price_BD))

#Conversión de datos a númericos limpios.
datos_numericos <- datos_numericos %>%
  mutate(
    Price_ES = as.numeric(gsub(",", "", Price_ES)),
    Price_BD = as.numeric(gsub(",", "", Price_BD))
  )
#Utilizar función cor.
correlacion <- cor(datos_numericos$Price_ES, datos_numericos$Price_BD, method = "pearson")
cat("La correlación entre las columnas 'Price' de las dos bases de datos es:", correlacion, "\n")

#Gráfico 13 (Puntos de disperción luego línea de tendencia central).
grafico <- ggplot(datos_numericos, aes(x = Price_ES, y = Price_BD)) +
  geom_point(color = "blue", alpha = 0.6) +
  geom_smooth(method = "lm", color = "red", se = FALSE) +
  labs(title = "Correlación de precios de SP500 y NQ", x = "SP500 Price", y = "NSQ Price") +
  theme_minimal()
print(grafico)